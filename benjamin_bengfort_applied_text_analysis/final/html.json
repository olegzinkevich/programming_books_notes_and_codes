{"url": "https://bbengfort.github.io/snippets/2016/04/12/nltk-corpus-reader.html", "uid": "1", "page_content": "<!DOCTYPE html>\n<html lang=\"en-us\">\n\n  <head>\n  <link href=\"http://gmpg.org/xfn/11\" rel=\"profile\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n\n  <!-- Enable responsiveness on mobile devices-->\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1\">\n\n  <title>\n    \n      NLTK Corpus Reader for Extracted Corpus &middot; Libelli\n    \n  </title>\n\n  <!-- CSS -->\n  <link rel=\"stylesheet\" href=\"https://bbengfort.github.io/assets/css/poole.css\">\n  <link rel=\"stylesheet\" href=\"https://bbengfort.github.io/assets/css/syntax.css\">\n  <link rel=\"stylesheet\" href=\"https://bbengfort.github.io/assets/css/hyde.css\">\n  <link rel=\"stylesheet\" href=\"https://bbengfort.github.io/assets/css/libelli.css\">\n  <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=PT+Sans:400,400italic,700|Abril+Fatface\">\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\">\n\n  <!-- Icons -->\n  <link rel=\"apple-touch-icon-precomposed\" sizes=\"180x180\" href=\"https://bbengfort.github.io/assets/apple-touch-icon-precomposed.png\">\n  <link rel=\"shortcut icon\" href=\"https://bbengfort.github.io/assets/favicon.ico\">\n\n  <!-- RSS -->\n  <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"/feed.xml\">\n</head>\n\n\n  <body>\n\n    <div class=\"sidebar\">\n  <div class=\"container sidebar-sticky\">\n    <div class=\"sidebar-about\">\n      <img class=\"brandicon\" src=\"https://bbengfort.github.io/assets/icon.png\" />\n      <h1>\n        <a href=\"https://bbengfort.github.io/\">\n          Libelli\n        </a>\n      </h1>\n      <p class=\"lead\">The development journal of <a href=\"https://twitter.com/bbengfort\">@bbengfort</a> including notes and ramblings from his various programming activities.\n</p>\n    </div>\n\n    <nav class=\"sidebar-nav\">\n      <a class=\"sidebar-nav-item\" href=\"https://bbengfort.github.io/\">\n        <i class=\"fa fa-home\"></i>\n        Home\n      </a>\n\n      \n\n      \n      \n        \n          \n        \n      \n        \n          \n            <a class=\"sidebar-nav-item\" href=\"/about.html\">\n              <i class=\"fa fa-info-circle\"></i> About\n            </a>\n          \n        \n      \n        \n          \n            <a class=\"sidebar-nav-item\" href=\"/archive.html\">\n              <i class=\"fa fa-archive\"></i> Archive\n            </a>\n          \n        \n      \n        \n      \n        \n          \n        \n      \n        \n          \n            <a class=\"sidebar-nav-item\" href=\"/scorecard.html\">\n              <i class=\"fa fa-list\"></i> Scorecard\n            </a>\n          \n        \n      \n        \n      \n        \n          \n        \n      \n        \n          \n        \n      \n        \n          \n        \n      \n        \n          \n        \n      \n        \n          \n        \n      \n        \n          \n        \n      \n        \n          \n        \n      \n        \n          \n        \n      \n        \n          \n        \n      \n      <a class=\"sidebar-nav-item\" href=\"https://github.com/bbengfort\">\n        <i class=\"fa fa-github\"></i>\n        GitHub\n      </a>\n      <a class=\"sidebar-nav-item\" href=\"https://twitter.com/bbengfort\">\n        <i class=\"fa fa-twitter\"></i>\n        Twitter\n      </a>\n      <!-- <span class=\"sidebar-nav-item\">Currently v1.0</span> -->\n    </nav>\n\n    <p>&copy; 2019. All rights reserved.</p>\n  </div>\n</div>\n\n\n    <div class=\"content container\">\n      <div class=\"post\">\n  <h1 class=\"post-title\">NLTK Corpus Reader for Extracted Corpus</h1>\n  <span class=\"post-date\">12 Apr 2016</span>\n  <p>Yesterday I wrote a blog about <a href=\"/snippets/2016/04/10/extract-ddl-corpus.html\">extracting a corpus</a> from a directory containing Markdown, such as for a blog that is deployed with Silvrback or Jekyll. In this post, I\u2019ll briefly show how to use the built in <code class=\"highlighter-rouge\">CorpusReader</code> objects in <code class=\"highlighter-rouge\">nltk</code> for streaming the data to the segmentation and tokenization preprocessing functions that are built into NLTK for performing analytics.</p>\n\n<p>The dataset that I\u2019ll be working with is the <a href=\"http://blog.districtdatalabs.com/\">District Data Labs Blog</a>, in particular the state of the blog as of today. The dataset can be downloaded from the <a href=\"http://bit.ly/ddl-blogs-corpus\">ddl corpus</a>, which also has the code in this post for you to use to perform other analytics.</p>\n\n<p>The <code class=\"highlighter-rouge\">mdec.py</code> program extracted our corpus in two formats: html and text. It also setup the corpus as follows:</p>\n\n<ul>\n  <li>README describing the corpus (no extension)</li>\n  <li>all text files in the same directory with the .txt or .html extension</li>\n</ul>\n\n<p>If this had been a categorized corpus, then we would have created subdirectories for each category in the corpus, and placed the correct files there. This organization has important implications for using the base readers without too much extension. Plus it helps others understand how to set up corpora with ease.</p>\n\n<h2 id=\"reading-corpora\">Reading Corpora</h2>\n\n<p>NLTK\u2019s <code class=\"highlighter-rouge\">CorpusReader</code> objects provide a useful interface to streaming, end-to-end reads of a text corpus from multiple files on disk. To construct a corpus you need to pass the path to the directory containing the corpus, as well as a pattern for a regular expression matching the files that belong to the corpus. By default the <code class=\"highlighter-rouge\">CorpusReader</code> opens everything with UTF-8 encoding and generally provides the following descriptive methods:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">readme()</code>: returns the contents of a README file</li>\n  <li><code class=\"highlighter-rouge\">citation()</code>: returns the contents of a citation.bib file</li>\n  <li><code class=\"highlighter-rouge\">license()</code>: returns the contents of a LICENSE file</li>\n</ul>\n\n<p>Generally speaking, your corpora should include all of these meta data files in the root directory in order to be considered complete.</p>\n\n<p>There are many types of <code class=\"highlighter-rouge\">CorpusReader</code> subclasses available in NLTK. The base classes provide readers for syntax corpora (those that are already structured as parses), bracket corpora (already part of speech tagged), and categorized corpora (documents associated with specific files). There are also a host of readers for the specific corpora that come included with NLTK. In general, these readers should provide an API that contain the following methods:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">paras()</code>: returns an iterable of paragraphs (a list of lists of sentences)</li>\n  <li><code class=\"highlighter-rouge\">sents()</code>: returns an iterable of sentences (a list of lists of words)</li>\n  <li><code class=\"highlighter-rouge\">words()</code>: returns an iterable of words (a list of words)</li>\n  <li><code class=\"highlighter-rouge\">raw()</code>: simply returns the raw text from the corpus</li>\n</ul>\n\n<p>Most <code class=\"highlighter-rouge\">CorpusReader</code> classes can be accessed and filtered by a specific file or category or a list of files or categories. There are two primary methods for listing these if available to the corpus:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">fileids()</code>: lists the names of the files that are in the corpus</li>\n  <li><code class=\"highlighter-rouge\">categories()</code>: lists the names of the categories in the corpus</li>\n</ul>\n\n<p>This listing of API methods is by no means comprehensive. However, for most of the text analytics you\u2019ll be doing, these methods will do the bulk of the work. I would consider a CorpusReader complete if it contained all of these methods.</p>\n\n<h2 id=\"reading-the-text-corpus\">Reading the Text Corpus</h2>\n\n<p>The simplest thing to do is read our plaintext corpus, as we have to write no code to do so. Instead we can simply use the <code class=\"highlighter-rouge\">nltk.corpus.PlaintextCorpusReader</code> directly, instantiating it with the correct path and pattern for our files. For the DDL corpus this looks like something as follows:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">nltk.corpus.reader.plaintext</span> <span class=\"kn\">import</span> <span class=\"n\">PlaintextCorpusReader</span>\n\n<span class=\"n\">corpus</span> <span class=\"o\">=</span> <span class=\"n\">PlaintextCorpusReader</span><span class=\"p\">(</span><span class=\"n\">CORPUS_TEXT</span><span class=\"p\">,</span> <span class=\"s\">'.*</span><span class=\"err\">\\</span><span class=\"s\">.txt'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>That\u2019s it! As long as we path it a correct path to the corpus and a <em>pattern</em> for identifying text files, then we\u2019re good to go! Note that the pattern is formatted as a Python regular expression, hence the escaped <code class=\"highlighter-rouge\">.</code> \u2013 unfortunately NLTK doesn\u2019t use <code class=\"highlighter-rouge\">glob</code> or other patterns for file identification.</p>\n\n<p>We can now print out some information about our corpus using the reader directly:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">nltk</span> <span class=\"kn\">import</span> <span class=\"n\">FreqDist</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">corpus_info</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    Prints out information about the status of a corpus.\n    \"\"\"</span>\n    <span class=\"n\">fids</span>   <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"o\">.</span><span class=\"n\">fileids</span><span class=\"p\">())</span>\n    <span class=\"n\">paras</span>  <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"o\">.</span><span class=\"n\">paras</span><span class=\"p\">())</span>\n    <span class=\"n\">sents</span>  <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"o\">.</span><span class=\"n\">sents</span><span class=\"p\">())</span>\n    <span class=\"n\">sperp</span>  <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">para</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">para</span> <span class=\"ow\">in</span> <span class=\"n\">corpus</span><span class=\"o\">.</span><span class=\"n\">paras</span><span class=\"p\">())</span> <span class=\"o\">/</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">paras</span><span class=\"p\">)</span>\n    <span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"n\">FreqDist</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"o\">.</span><span class=\"n\">words</span><span class=\"p\">())</span>\n    <span class=\"n\">count</span>  <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n    <span class=\"n\">vocab</span>  <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"p\">)</span>\n    <span class=\"n\">lexdiv</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">vocab</span><span class=\"p\">)</span>\n\n    <span class=\"k\">print</span><span class=\"p\">((</span>\n        <span class=\"s\">\"Text corpus contains {} files</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n        <span class=\"s\">\"Composed of {} paragraphs and {} sentences.</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n        <span class=\"s\">\"{:0.3f} sentences per paragraph</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n        <span class=\"s\">\"Word count of {} with a vocabulary of {}</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n        <span class=\"s\">\"lexical diversity is {:0.3f}\"</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"n\">fids</span><span class=\"p\">,</span> <span class=\"n\">paras</span><span class=\"p\">,</span> <span class=\"n\">sents</span><span class=\"p\">,</span> <span class=\"n\">sperp</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">vocab</span><span class=\"p\">,</span> <span class=\"n\">lexdiv</span>\n    <span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>And the result is:</p>\n\n<div class=\"language-text highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Text corpus contains 17 files\nComposed of 1367 paragraphs and 2817 sentences.\n2.061 sentences per paragraph\nWord count of 57762 with a vocabulary of 5602\nlexical diversity is 10.311\n</code></pre></div></div>\n\n<p>Pretty simple!</p>\n\n<h2 id=\"reading-the-html-corpus\">Reading the HTML Corpus</h2>\n\n<p>The <code class=\"highlighter-rouge\">PlaintextCorpusReader</code> determined paragraphs as those separated by newlines, something that is not guaranteed for all corpora. HTML documents provide a bit more structure for us to parse, but there is no built in HTML corpus reader, unfortunately. Let\u2019s take a look at how to extend our corpus reader to read HTML:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">bs4</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HTMLCorpusReader</span><span class=\"p\">(</span><span class=\"n\">PlaintextCorpusReader</span><span class=\"p\">):</span>\n\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s\">'h1'</span><span class=\"p\">,</span> <span class=\"s\">'h2'</span><span class=\"p\">,</span> <span class=\"s\">'h3'</span><span class=\"p\">,</span> <span class=\"s\">'h4'</span><span class=\"p\">,</span> <span class=\"s\">'h5'</span><span class=\"p\">,</span> <span class=\"s\">'h6'</span><span class=\"p\">,</span> <span class=\"s\">'h7'</span><span class=\"p\">,</span> <span class=\"s\">'p'</span><span class=\"p\">,</span> <span class=\"s\">'li'</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_read_word_block</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">):</span>\n        <span class=\"n\">soup</span>  <span class=\"o\">=</span> <span class=\"n\">bs4</span><span class=\"o\">.</span><span class=\"n\">BeautifulSoup</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"s\">'lxml'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_word_tokenizer</span><span class=\"o\">.</span><span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">get_text</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_read_para_block</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">):</span>\n        <span class=\"s\">\"\"\"\n        The stream is a single block (file) to extract paragraphs from.\n        Method must return list(list(list(str))) of paragraphs, sentences,\n        and words, so all tokenizers must be used here.\n        \"\"\"</span>\n        <span class=\"n\">soup</span>  <span class=\"o\">=</span> <span class=\"n\">bs4</span><span class=\"o\">.</span><span class=\"n\">BeautifulSoup</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"s\">'lxml'</span><span class=\"p\">)</span>\n        <span class=\"n\">paras</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">para</span> <span class=\"ow\">in</span> <span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">):</span>\n            <span class=\"n\">paras</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_word_tokenizer</span><span class=\"o\">.</span><span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"n\">sent</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">sent</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sent_tokenizer</span><span class=\"o\">.</span><span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"n\">para</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n            <span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">paras</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">PlaintextCorpusReader</code> accepts as additional input a <code class=\"highlighter-rouge\">word_tokenizer</code>, a <code class=\"highlighter-rouge\">sent_tokenizer</code>, and a <code class=\"highlighter-rouge\">para_block</code>: functions that deal with tokenizing the text into various chunks. By default these are the <code class=\"highlighter-rouge\">wordpunct_tokenzie</code>, <code class=\"highlighter-rouge\">sent_tokenize</code>, and blank line blocks reader, respectively.</p>\n\n<p>In order to add different functionality, you can either pass a callable into the constructor, or you can override some internal methods. Note that you <em>should not override the <code class=\"highlighter-rouge\">paras</code>, <code class=\"highlighter-rouge\">sents</code>, or <code class=\"highlighter-rouge\">words</code> methods</em> \u2013 these methods handle the streaming. Instead you should override the following protected methods:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">_read_word_block</code>: tokenizes 20 lines at a time from the stream.</li>\n  <li><code class=\"highlighter-rouge\">_read_sent_block</code>: passes the file paragraph at a time into the segmenter.</li>\n  <li><code class=\"highlighter-rouge\">_read_para_block</code>: deals with a file at a time from the stream.</li>\n</ul>\n\n<p>Although protected, you can see how easy it is to get access to the block stream and override it. Here we simply look for a variety of tags to call \u201cparagraphs\u201d by using <code class=\"highlighter-rouge\">BeautifulSoup</code>, then correctly return the segmented and tokenized text. Our word block tokenizer simply does an HTML strip tags.</p>\n\n</div>\n\n<div class=\"related\">\n  <h2>Related Posts</h2>\n  <ul class=\"related-posts\">\n    \n      <li>\n        <h3>\n          <a href=\"/snippets/2019/02/05/mount-ebs-volume.html\">\n            Mount an EBS volume\n            <small>05 Feb 2019</small>\n          </a>\n        </h3>\n      </li>\n    \n      <li>\n        <h3>\n          <a href=\"/snippets/2018/09/26/blast-throughput.html\">\n            Blast Throughput\n            <small>26 Sep 2018</small>\n          </a>\n        </h3>\n      </li>\n    \n      <li>\n        <h3>\n          <a href=\"/programmer/2018/09/22/go-testing-notes.html\">\n            Go Testing Notes\n            <small>22 Sep 2018</small>\n          </a>\n        </h3>\n      </li>\n    \n  </ul>\n</div>\n\n    </div>\n\n    <!-- Javascript included at the bottom of the page for faster loading -->\n<script type=\"text/javascript\" async\n  src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n\n    <!-- Google Analytics -->\n<script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-8096804-11', 'auto');\n  ga('send', 'pageview');\n</script>\n\n\n  </body>\n</html>\n", "date": "10-12-2018"}